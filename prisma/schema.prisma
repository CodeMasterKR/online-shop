// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  firstName  String
  lastName   String
  email      String     @unique
  phone      String     @unique
  password   String
  datebirth  String
  gender     gender
  image      String?
  role       userRole   @default(USER)
  userStatus userStatus @default(INACTIVE)

  Order      Order[]
  OrderItems OrderItems[]
  sessions   Session[]    @relation("UserSessions")
}

model Session {
  id                 String   @id @default(uuid())
  hashedRefreshToken String?  @unique
  ipAddress          String?
  deviceInfo         String?
  location           String?
  expiresAt          DateTime
  createdAt          DateTime @default(now())
  userId             String
  user               User     @relation(fields: [userId], references: [id], name: "UserSessions", onDelete: Cascade) // Cascade delete qo'shdim
}

enum gender {
  MALE
  FEMALE
}

enum userRole {
  ADMIN
  SUPERADMIN
  USER
}

enum userStatus {
  ACTIVE
  INACTIVE
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  image       String
  Product     Product[]
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String
  count       Int
  color       String
  price       Int
  image       String
  categoryId  String
  categry     Category     @relation(fields: [categoryId], references: [id])
  OrderItems  OrderItems[]
}

model Order {
  id         String           @id @default(uuid())
  isPaid     paymentCondition
  totalPrice Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt()
  userId     String
  user       User             @relation(fields: [userId], references: [id])
}

enum paymentCondition {
  PAID
  NOTPAID
}

model OrderItems {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
